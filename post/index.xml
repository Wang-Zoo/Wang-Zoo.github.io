<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on WangZoo - 码字坞</title>
    <link>https://wang-zoo.github.io/post/</link>
    <description>Recent content in Posts on WangZoo - 码字坞</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wang-zoo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>View 测绘分析</title>
      <link>https://wang-zoo.github.io/post/view_traversal/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/view_traversal/</guid>
      <description>Vsync 测绘需要经过cpu的运算，gpu的分配，硬件的渲染，因为在人的眼睛感官中，每秒大于等于60帧画面时，我们就不会对于画面产生卡顿的感觉，这样</description>
    </item>
    
    <item>
      <title>View 事件体系分析</title>
      <link>https://wang-zoo.github.io/post/view_event/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/view_event/</guid>
      <description>前言 android 事件体系比较繁杂，为了充分了解整个结构，我们需要完全搞清楚视图组成，事件来源，最后才是事件分发。 View Activity与WindowMan</description>
    </item>
    
    <item>
      <title>Android Java层消息队列详解</title>
      <link>https://wang-zoo.github.io/post/messagequeue/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/messagequeue/</guid>
      <description>前言 消息队列关联 消息队列结构大致如上，底层是Message链表，每个Message（非barrier）都会关联一个Handler，这些Han</description>
    </item>
    
    <item>
      <title>9.0 插件化方案实践</title>
      <link>https://wang-zoo.github.io/post/plugin_struc/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/plugin_struc/</guid>
      <description>前言 9.0 源码相对于之前的版本都有很大的调整，在插件化技术上需要做单独的Hook。不过在插件化方案上还是没有太大的变动。 1.方案 插件化方案 本文采</description>
    </item>
    
    <item>
      <title>Flutter 插件原理</title>
      <link>https://wang-zoo.github.io/post/flutter_plugin/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/flutter_plugin/</guid>
      <description>Platform Channel flutter的android平台的通讯Channel大致有三种。 Name Function BasicMessageChannel 用于简单的数据传递 MethodChannel 传递一个方法名和参数来完成通讯 EventChannel 类似于长连接</description>
    </item>
    
    <item>
      <title>Service启动流程分析</title>
      <link>https://wang-zoo.github.io/post/plugin_service/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/plugin_service/</guid>
      <description>前言 本文分析源码来自android 9.0 启动分析 Service start时序图 如果直接调用startService来启动Service，一个完整流程大致如上</description>
    </item>
    
    <item>
      <title>9.0 Activity启动流程分析</title>
      <link>https://wang-zoo.github.io/post/plugin_activity/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/plugin_activity/</guid>
      <description>前言 一直想写写插件化，才发现自己连Activity的启动过程都不甚了解。插件化说到底考验的是开发者对于Android 源码的深入理解程度。 万丈</description>
    </item>
    
    <item>
      <title>Fresco 源码分析</title>
      <link>https://wang-zoo.github.io/post/fresco_source/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/fresco_source/</guid>
      <description>前言 头篇刚分析完Picasso，我兴致勃勃的打起了Fresco的主意，看了将近40分钟之后，我问了我自己三个问题。 1 2 3 1.为什么要折磨自己</description>
    </item>
    
    <item>
      <title>Picasso 源码分析</title>
      <link>https://wang-zoo.github.io/post/picasso_source/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/picasso_source/</guid>
      <description>前言 记得android开发最开始，图片的加载一直是一个历史性问题。OOM，图片错位，图片渲染速度等种种问题一直困扰着我们这些苦逼的开发人员，</description>
    </item>
    
    <item>
      <title>Okhttp源码分析</title>
      <link>https://wang-zoo.github.io/post/okhttp_source/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/okhttp_source/</guid>
      <description>前言 探寻一个事物的组成，不妨事先自我设想一下，这样才能真正明白自己的想法与他人的想法的区别 源码分析 1.怎么理解okhttp中的责任链机制 处理</description>
    </item>
    
    <item>
      <title>Hybrid开发之cordova(2)</title>
      <link>https://wang-zoo.github.io/post/hybrid_webview/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/hybrid_webview/</guid>
      <description>前言 想要舒服的使用webview，就不得不了解webview三剑客，websettings，webchromeclient，webviewc</description>
    </item>
    
    <item>
      <title>人物随记-希文</title>
      <link>https://wang-zoo.github.io/post/fangzhongyan/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/fangzhongyan/</guid>
      <description>吃苦少年 读《如果这是宋史》时，看到了这样一则故事。范仲淹年轻时在书院读书生活拮据，就每天早上领一份粥，不吃，等粥 干了之后，切成四块，这就是一</description>
    </item>
    
    <item>
      <title>Hybrid开发之cordova(1)</title>
      <link>https://wang-zoo.github.io/post/hybrid-cordova-1/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/hybrid-cordova-1/</guid>
      <description>前言 Hybrid 话题比较大，但是这是app以后的主流开发趋势，本着不落后于时代的初心，笔者也开始一步一步的记录学习心得， 由于目前项目所使用的是cord</description>
    </item>
    
    <item>
      <title>LitePal源码分析</title>
      <link>https://wang-zoo.github.io/post/litepal_source/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/litepal_source/</guid>
      <description>1.结构分析 1.1 UML类图 litepal 类关联图 1.2 UML时序图 litepal 初始化时序图 1.3 表的创建与分类 作者在存储一个对象时，将所有字段类型分别转换成如下三种表的形式</description>
    </item>
    
    <item>
      <title>开篇随记</title>
      <link>https://wang-zoo.github.io/post/first/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wang-zoo.github.io/post/first/</guid>
      <description>看了看时间，下午7点整，我熟练的拿出手机，打了一下卡，今天算是就这样结束了。出了公司门，迎面而来的是一阵热浪，忽然间又回味起了办公室的冷气。</description>
    </item>
    
  </channel>
</rss>